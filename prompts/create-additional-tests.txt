## Role

You are an expert developer specializing in TypeScript, with extensive experience in Automation Testing for REST APIs. 
Your task is to create additional API automation test code based on an initial test and models using a custom testing framework, as detailed below.

## Task

- Your task is to complete the test file in the First Test section with additional tests.
- Use the first test and the models provided to generate a comprehensive set of tests.
- Only generate tests for the test file provided.
- Generate all necessary tests based on your experience and best practices, covering all expected scenarios for the endpoint documented on the OpenAPI Definition section.
- Create tests for every status code listed in the OpenAPI definition section.
- For non-successful status codes (e.g., 400), do not use try/catch blocks. Instead, call the endpoint as you would in positive tests and assert directly against the status code. Refer to the example "@Regression - No Firstname - 400" in the Test Examples section for guidance.
- Create tests for relevant combinations of parameters and payloads that you determine to be meaningful test cases based on best practices.
- Use the service model class and any other models provided in the Models section as reference only; do not include them in the response. Paths in the imports must match the paths in the Models section.
- When applicable, create test preconditions and postconditions using other endpoints in the service model classes. For example, use a POST request to create a resource required for a GET test. If preconditions apply to several tests, place them in a before or beforeAll hook as needed.
- Ensure that each call to service methods includes the appropriate response model as the generic type T. If the response type is unknown or unnecessary, pass null. There is no need to pass the Response object, just the specific response model (e.g. bookingService.getBooking<BookingModel>(bookingId);)
- Use optional chaining (?.) when accessing properties that could potentially be undefined (e.g., response.data?.id.should.equal(orderId);) to avoid errors during runtime.
- Create any additional models required by the tests that are not listed in the Models section.
- Use .js extensions in all import statements.
- You will be penalized for every TS or ESLint error.

## Output

The output must contain the function call for all the files generated.
Generate all files at once.
Only one test file must be included in the output to replace the one in the First Test section.
Make sure the output is only the function call and nothing else.

## Test examples

```tsx
import {{ BookingService }} from "../../models/services/BookingService.js";
import {{ BookingModel }} from "../../models/requests/BookingModel.js";
import 'chai/register-should.js';

const randomString = (len: number) => Math.random().toString(36).slice(2, 2 + len);
const formatYMD = (d: Date) => {{
  const y = d.getUTCFullYear();
  const m = String(d.getUTCMonth() + 1).padStart(2, "0");
  const day = String(d.getUTCDate()).padStart(2, "0");
  return `${{y}}-${{m}}-${{day}}`;
}};
const addDaysUTC = (days: number) => {{
  const now = new Date();
  const t = Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() + days);
  return formatYMD(new Date(t));
}};

describe("Add Booking", () => {{
  const bookingService = new BookingService();

  it("@Smoke - Add Booking Successfully", async () => {{
    const booking: BookingModel = {{
      firstname: randomString(5),
      lastname: randomString(7),
      totalprice: Math.floor(Math.random() * 1500) + 100,
      depositpaid: true,
      bookingdates: {{
        checkin: addDaysUTC(1),
        checkout: addDaysUTC(366),
      }},
      additionalneeds: "Breakfast",
    }};

    const response = await bookingService.addBooking<BookingModel>(booking);

    response.status.should.equal(200, JSON.stringify(response.data));
    response.data.firstname?.should.equal(booking.firstname);
    response.data.lastname?.should.equal(booking.lastname);
    response.data.totalprice?.should.equal(booking.totalprice);
    response.data.depositpaid?.should.be.true;
    response.data.bookingdates?.checkin?.should.equal(booking.bookingdates?.checkin);
    response.data.bookingdates?.checkout?.should.equal(booking.bookingdates?.checkout);
    response.data.additionalneeds?.should.equal(booking.additionalneeds);
  }});

  it("@Regression - Add Booking Successfully - Response time < 1000 ms", async () => {{
    const booking: BookingModel = {{
      firstname: randomString(6),
      lastname: randomString(8),
      totalprice: Math.floor(Math.random() * 2000) + 200,
      depositpaid: true,
      bookingdates: {{
        checkin: addDaysUTC(7),
        checkout: addDaysUTC(37),
      }},
      additionalneeds: "Breakfast",
    }};

    const response = await bookingService.addBooking<BookingResponse>(booking);
    response.responseTime.should.be.lessThan(1000);
  }});

  it("@Regression - No Firstname - 400", async () => {{
    const response = await bookingService.addBooking<BookingResponse>({{
      lastname: randomString(6),
      totalprice: Math.floor(Math.random() * 1500) + 300,
      depositpaid: true,
      bookingdates: {{
        checkin: addDaysUTC(14),
        checkout: addDaysUTC(44),
      }},
      additionalneeds: "Breakfast",
    }});
    response.status.should.equal(400);
  }});
}});
```

```tsx
import {{ BookingModel }} from "../../models/requests/BookingModel.js";
import {{ BookingResponse }} from "../../models/responses/BookingResponse.js";
import {{ BookingService }} from "../../models/services/BookingService.js";
import 'chai/register-should.js';

const randomString = (len: number) => Math.random().toString(36).slice(2, 2 + len);
const formatYMD = (d: Date) => {{
  const y = d.getUTCFullYear();
  const m = String(d.getUTCMonth() + 1).padStart(2, "0");
  const day = String(d.getUTCDate()).padStart(2, "0");
  return `${{y}}-${{m}}-${{day}}`;
}};
const addDaysUTC = (days: number) => {{
  const now = new Date();
  const t = Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() + days);
  return formatYMD(new Date(t));
}};
const randomLargeId = () => 10_000_000 + Math.floor(Math.random() * 9_000_000);

describe("Get Booking", () => {{
  const bookingService = new BookingService();
  let bookingId: number;
  let createdBooking: Response<BookingResponse>;

  before(async () => {{
    createdBooking = await bookingService.addBooking<BookingResponse>({{
      firstname: randomString(6),
      lastname: randomString(8),
      totalprice: Math.floor(Math.random() * 2000) + 200,
      depositpaid: true,
      bookingdates: {{
        checkin: addDaysUTC(2),
        checkout: addDaysUTC(12),
      }},
      additionalneeds: "Breakfast",
    }});

    bookingId = createdBooking.data.bookingid;
  }});

  it("@Smoke - Get Booking successfully - 200", async () => {{
    const response = await bookingService.getBooking<BookingModel>(bookingId);
    response.status.should.equal(200, JSON.stringify(response.data));
    response.data.firstname?.should.equal(createdBooking.data.booking.firstname);
    response.data.lastname?.should.equal(createdBooking.data.booking.lastname);
    response.data.totalprice?.should.equal(createdBooking.data.booking.totalprice);
    response.data.depositpaid?.should.be.true;
    response.data.bookingdates?.checkin?.should.equal(createdBooking.data.booking.bookingdates?.checkin);
    response.data.bookingdates?.checkout?.should.equal(createdBooking.data.booking.bookingdates?.checkout);
    response.data.additionalneeds?.should.equal(createdBooking.data.booking.additionalneeds);
  }});

  it("@Regression - Get Booking successfully - Response time < 1000 ms", async () => {{
    const response = await bookingService.getBooking<BookingModel>(bookingId);
    response.responseTime.should.be.lessThan(1000);
  }});

  it("@Regression - Get Non-existent Booking - 404", async () => {{
    const nonExistentId = randomLargeId();
    const response = await bookingService.getBooking<BookingResponse>(nonExistentId);
    response.status.should.equal(404, JSON.stringify(response.data));
  }});
}});
```

## First Test

```json
{tests}
```

## Models

```json
{models}
```

## OpenAPI Definition

```yaml
{api_definition}
```